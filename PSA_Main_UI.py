import os
import sys
import pandas as pd
from Regen_UI import regen_ui               # Load the function which runs a batch to regen the UI each time code runs.
# This is used for Development
from Read_Master import Read_Master         # import the function which reads from the Master PSA file
from Read_Master import Read_AnalyserStatus        # import the function which reads from the PSA Report file generated by the analyser
from Read_Master import Read_PeakControl
from Read_Master import Read_VersionNumbers
from Read_Master import Read_AnalyserIO
# from PyQt5.QtGui import (QPixmap)
import datetime
from PSA_Home import Ui_PSAHome
from PSA_Page1 import Ui_PSAPage1
from PSA_Page2 import Ui_PSAPage2
from PSA_Page3 import Ui_PSAPage3
from PSA_Page4 import Ui_PSAPage4
from PSA_Page5 import Ui_PSAPage5
from PSA_Page6 import Ui_PSAPage6
from PyQt5.QtWidgets import (QApplication, QMainWindow, QFileDialog, QTableWidgetItem)
from PyQt5 import QtCore
from PyQt5 import QtGui
import matplotlib.pyplot as plt

#regen_ui()                  # Regenerate the UI. This is used to update the UI file after changes

# Define a function which reads in the data from the relevant files. This may be called in a few different places.
# this function takes 1 folder location and uses the PSA Master default location
def ReadInData(folder):
    PSAMaster = "C:\\Users\\l.ritchie\\PycharmProjects\\Scantech_Monthly_PSA_Report\\PSA_Master_List.xlsx"
    PSAMasterData = Read_Master(PSAMaster)  # Read in master file data from PSA Master file.
    AnalyserStatus = Read_AnalyserStatus(folder)  # Read in PSA Report file data from PSA Report file.
    PeakControl = Read_PeakControl(folder)  # Read in Analyser Peak Control Data
    VersionNumbers = Read_VersionNumbers(folder)  # Read in version numbers data
    AnalyserIO = Read_AnalyserIO(folder)

    return PSAMasterData, AnalyserStatus, PeakControl, VersionNumbers, AnalyserIO
DefaultFolder = "C:\\Users\\l.ritchie\\PycharmProjects\\Scantech_Monthly_PSA_Report"
PSAMasterData,AnalyserStatus, PeakControl, VersionNumbers, AnalyserIO = ReadInData(DefaultFolder)              # Read in master file data from PSA Master file.


AnalyserToProcess = 0
open_window = 0



class HomeWindow(QMainWindow,Ui_PSAHome):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.page1 = PSA_pg1()
        self.page2 = PSA_pg2()
        self.page3 = PSA_pg3()
        self.page4 = PSA_pg4()
        self.page5 = PSA_pg5()
        self.page6 = PSA_pg6()
        self.connectSignalsSlots()
        self.popanalysers()
        FolderInUse = "C:\\Users\\l.ritchie\\PycharmProjects\\Scantech_Monthly_PSA_Report"

    # Setup Signals and Slots for Pushbuttons
    def connectSignalsSlots(self):
        self.NewReportPB.released.connect(self.show_page_1)
        self.NewReportPB.clicked.connect(self.updateReport)
        # self.NewReportPB.clicked.connect(self.RepEmail)
        self.PB_pg.released.connect(self.show_page_1)
        self.PB_pg_2.released.connect(self.show_page_2)
        self.PB_pg_3.released.connect(self.show_page_3)
        self.PB_pg_4.released.connect(self.show_page_4)
        self.PB_pg_5.released.connect(self.show_page_5)
        self.PB_pg_6.released.connect(self.show_page_6)
        self.OpenReportPB.released.connect(self.openReport)
        self.CalibratorListComboBox.currentTextChanged.connect(self.updatehome)
        #self.AnalyserListComboBox.currentTextChanged.connect(self.updatehome)
        self.AnalyserListComboBox.activated.connect(self.GetFolder)

    def GetFolder(self):
        anal = self.AnalyserListComboBox.currentText()
        # Switches default folder based on which analyser is selected.
        if anal[0:3] == "C15":
            DefaultFolder, _ = os.path.dirname(QFileDialog.getOpenFileName(self,"Open PSA File in PSA Folder","J:\\Client Analysers\\NG-1500"))
        elif anal[0:3] == "C21":
            DefaultFolder, _ = os.path.dirname(QFileDialog.getOpenFileName(self, "Open PSA File in PSA Folder", "J:\\Client Analysers\\CS-2100"))
        elif anal[0:3] == "CMM":
            DefaultFolder, _ = os.path.dirname(QFileDialog.getOpenFileName(self, "Open PSA File in PSA Folder", "J:\\Client Analysers\\CMM-100"))
        elif anal[0:3] == "OBA":
            DefaultFolder, _ = os.path.dirname(QFileDialog.getOpenFileName(self, "Open PSA File in PSA Folder", "J:\\Client Analysers\\On Belt Analyser"))
        elif anal[0:3] == "TBM":
            DefaultFolder, _ = os.path.dirname(QFileDialog.getOpenFileName(self, "Open PSA File in PSA Folder", "J:\\Client Analysers\\TBM-210"))
        else:
            DefaultFolder, _ = os.path.dirname(QFileDialog.getOpenFileName(self, "Open PSA File in PSA Folder", "J:\\Client Analysers\\TBM-230"))
        print(anal[0:2])
        print(DefaultFolder)
        # Update the data in the global variables
        PSAMasterData, AnalyserStatus, PeakControl, VersionNumbers, AnalyserIO = ReadInData(DefaultFolder)

    def updatehome(self):
        anal = self.AnalyserListComboBox.currentText()

        # Updates labels on Home Screen
        anallabel = 'Do you wish to process ' + str(anal) + "?"
        self.AnalyserToBeProcessed.setText(anallabel)
        calibrator = self.CalibratorListComboBox.currentText()
        callabel = "Welcome " + calibrator
        self.WelcomeText.setText(callabel)

    def updateReport(self):
        anal = self.AnalyserListComboBox.currentText()
        repdate = str(datetime.date.today()) # egt todays date
        serveng = PSAMasterData.loc[PSAMasterData["Analyser Number"] == anal, "Service Engineer"].to_string(index=False) #get the service engineer as a string without dataframe nonsense
        application = PSAMasterData.loc[PSAMasterData["Analyser Number"] == anal, "Application"].to_string(index=False) #get the service engineer as a string without dataframe nonsense
        customer = PSAMasterData.loc[PSAMasterData["Analyser Number"] == anal, "Customer Name"].to_string(index=False) #get the service engineer as a string without dataframe nonsense
        self.page1.rep_analyser_data.setText(anal)
        self.page1.rep_date_data.setText(repdate)
        self.page1.rep_serv_eng_data.setText(serveng)
        self.page1.rep_app_data.setText(application)
        self.page1.site_name.setText(customer)
        self.page1.period_data.setText(self.RepPeriod())
        self.page1.email_data.setText(self.RepEmail())
        self.page1.disp_stduptodate.setText(self.StdDate())
        self.page1.disp_endiskspc.setText(self.DiskSpaceOK())
        self.UpdateDetStab()
        self.UpdatePg6()

    def EnabledYes(self):
        enabled = "Yes"
        enableditem = QTableWidgetItem(enabled)
        brush = QtGui.QBrush(QtGui.QColor(85, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        enableditem.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        enableditem.setForeground(brush)
        return enableditem

    def EnabledNo(self):
        enabled = "No"
        enableditem = QTableWidgetItem(enabled)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        enableditem.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        enableditem.setForeground(brush)
        return enableditem

    def UpdatePg6(self):
        # Update PLC Status Table
        BeltRunning = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "BeltRunning","Value"].to_string(index=False))
        ForceAnalyse = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "ForceAnalyse", "Value"].to_string(index=False))
        ForceStandardise = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "ForceStandardise", "Value"].to_string(index=False))
        self.page6.PlantPLCTable.setItem(0, 0, BeltRunning)
        self.page6.PlantPLCTable.setItem(1, 0, ForceAnalyse)
        self.page6.PlantPLCTable.setItem(2, 0, ForceStandardise)
        # Update Analyser Status Table
        AnalyserOK = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "AnalyserOK","Value"].to_string(index=False))
        StandardsOK = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "StandardsOK","Value"].to_string(index=False))
        IOControlOK = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "IOControlOK","Value"].to_string(index=False))
        SpectraStable = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "SpectraStable", "Value"].to_string(index=False))
        self.page6.PlantPLCTable_2.setItem(0, 0, AnalyserOK)
        self.page6.PlantPLCTable_2.setItem(1, 0, StandardsOK)
        self.page6.PlantPLCTable_2.setItem(2, 0, IOControlOK)
        self.page6.PlantPLCTable_2.setItem(3, 0, SpectraStable)

        # Update PLC Analyser Results
        SystemOK = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "SystemRunning","Value"].to_string(index=False))
        SourceControlFault = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "SourceControlFault", "Value"].to_string(index=False))
        SourceOff = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "SourceOffProx", "Value"].to_string(index=False))
        SourceOn = QTableWidgetItem(AnalyserIO.loc[AnalyserIO["Parameter Name"] == "SourceOnProx", "Value"].to_string(index=False))
        self.page6.PlantPLCTable_3.setItem(0, 0, SystemOK)
        self.page6.PlantPLCTable_3.setItem(1, 0, SourceControlFault)
        self.page6.PlantPLCTable_3.setItem(2, 0, SourceOff)
        self.page6.PlantPLCTable_3.setItem(3, 0, SourceOn)

        # Update Analyser Config Table
        AnalysisPeriod = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "AnalysisPeriod","Value"].to_string(index=False))
        AnalMinLoadLimit = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "AnalMinLoadLimit","Value"].to_string(index=False))
        StandardisePeriod = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "StandardisePeriod","Value"].to_string(index=False))
        self.page6.PlantPLCTable_4.setItem(0, 0, AnalysisPeriod)
        self.page6.PlantPLCTable_4.setItem(1, 0, AnalMinLoadLimit)
        self.page6.PlantPLCTable_4.setItem(2, 0, StandardisePeriod)

        # Update Standardisation Table
        FirstStandard = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "FirstStandardTime","Value"].to_string(index=False))
        LastStandard = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "LastStandardTime","Value"].to_string(index=False))
        NumStandard = QTableWidgetItem(AnalyserStatus.loc[AnalyserStatus["Result Name"] == "PeriodCount","Value"].to_string(index=False))
        NumStandardMonth = QTableWidgetItem("PlaceHolder")
        self.page6.PlantPLCTable_5.setItem(0, 0, FirstStandard)
        self.page6.PlantPLCTable_5.setItem(1, 0, LastStandard)
        self.page6.PlantPLCTable_5.setItem(2, 0, NumStandard)
        self.page6.PlantPLCTable_5.setItem(3, 0, NumStandardMonth)

        # Update Software Versions Table
        Product = QTableWidgetItem(VersionNumbers.loc[VersionNumbers["Module"] == "Product","Version"].to_string(index=False))
        CsSchedule = QTableWidgetItem(VersionNumbers.loc[VersionNumbers["Module"] == "CsSchedule","Version"].to_string(index=False))
        self.page6.PlantPLCTable_6.setItem(0, 0, Product)
        self.page6.PlantPLCTable_6.setItem(1, 0, CsSchedule)

        # Update Disk Space Table
        DiskSpace = QTableWidgetItem(VersionNumbers.loc[VersionNumbers["Module"] == "DiskSpace","Version"].to_string(index=False))
        PercDiskSpace = QTableWidgetItem(VersionNumbers.loc[VersionNumbers["Module"] == "%DiskSpace","Version"].to_string(index=False))
        self.page6.PlantPLCTable_7.setItem(0, 0, DiskSpace)
        self.page6.PlantPLCTable_7.setItem(1, 0, PercDiskSpace)

    def UpdateDetStab(self):
        Dets = PeakControl.shape[1]-2
        x=0
        while x < Dets:
            disabled = PeakControl.loc[PeakControl["Result Name"] == "DetectorDisabled", "Detector "+str(x+1)].to_string(index=False)
            stablity = PeakControl.iloc[21, x+1]
            if disabled == "FALSE":
                value = self.EnabledYes()
            else:
                value = self.EnabledNo()
            self.page2.tableWidget.setItem(0, x, value)
            if stablity == "Stable":
                value = self.EnabledYes()
            else:
                value = self.EnabledNo()
            self.page2.tableWidget.setItem(1, x, value)
            x += 1

    def RepPeriod(self):
        dates = AnalyserStatus.loc[AnalyserStatus["Result Name"] == "LastPsaReportTime", "Value"] # get the date of the last psa report generation
        dates1 = pd.to_datetime(dates,yearfirst=True)   #setup dataframe as a date time series in the correct format
        Period = dates1.dt.month_name().to_string(index=False) + " " + dates1.dt.year.to_string(index=False) #concatenate the month name and year integer into a string called period using the to_string method to eliminate indexs
        return Period   #return Period to main

    def RepEmail(self):
        anal = self.AnalyserListComboBox.currentText()
        region = PSAMasterData.loc[PSAMasterData["Analyser Number"] == anal, "Region"].to_string(index=False) #get the service engineer as a string without dataframe nonsense
        if region == "Asia":
            email = "service.asia@scantech.com.au"
        elif region == "Australia":
            email = "service.australia@scantech.com.au"
        elif region == "China":
            email = "service.asia@scantech.com.au"
        elif region == "Europe":
            email = "service.europe@scantech.com.au"
        elif region == "India":
            email = "service.india@scantech.com.au"
        elif region == "Middle East & India":
            email = "service.middleeast@scantech.com.au"
        elif region == "New Zealand":
            email = "service.newzealand@scantech.com.au"
        elif region == "North Africa":
            email = "service.northafrica@scantech.com.au"
        elif region == "South Africa":
            email = "service.southafrica@scantech.com.au"
        elif region == "Latin America":
            email = "service.southamerica@scantech.com.au"
        elif region == "USA & Canada":
            email = "service.usa@scantech.com.au"
        else:
            email = "service.fsu@scantech.com.au"

        return email

    def StdDate(self):
        stddate = AnalyserStatus.loc[AnalyserStatus["Result Name"] == "LastStandardiseTime", "Value"] # get the date of the last psa report generation
        stddate = stddate.to_string(index=False)   #setup dataframe as a date time series in the correct format
        stddate = datetime.datetime.strptime(stddate, "%a %y/%m/%d %H:%M")
        tdate = datetime.datetime.today()
        difference = (tdate.year - stddate.year)*12 + (tdate.month-stddate.month)
        if difference > 6:
            output = "No"
        else:
            output = "Yes"

        return output

    def DiskSpaceOK(self):
        diskspace = VersionNumbers.loc[VersionNumbers["Module"] == "%DiskSpace", "Version"]
        diskspace = diskspace.to_string(index=False)
        diskspace = float(diskspace.replace("%",""))
        if diskspace > 10.00 :
            diskspaceok = "Yes"
        else:
            diskspaceok = "No"

        return diskspaceok

    def openReport(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self,"Choose Report File to Open", "","csv (*.csv)",
        options=options)
        print (fileName)

    def popanalysers(self):
        analysers = PSAMasterData["Analyser Number"]
        analysers.dropna(inplace=True)
        #print(analysers)
        for x in analysers:
            if x == "NaN":
                pass
            elif x == "Template":
                pass
            else:
                self.AnalyserListComboBox.addItem(str(x))

    def hide_pages(self):
        self.page1.hide()
        self.page2.hide()
        self.page3.hide()
        self.page4.hide()
        self.page5.hide()
        self.page6.hide()

    def show_page_1(self):
        self.hide_pages()
        self.page1.show()

    def show_page_2(self):
        self.hide_pages()
        self.page2.show()

    def show_page_3(self):
        self.hide_pages()
        self.page3.show()

    def show_page_4(self):
        self.hide_pages()
        self.page4.show()

    def show_page_5(self):
        self.hide_pages()
        self.page5.show()

    def show_page_6(self):
        self.hide_pages()
        self.page6.show()



class PSA_pg1(QMainWindow,Ui_PSAPage1):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

class PSA_pg2(QMainWindow,Ui_PSAPage2):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

class PSA_pg3(QMainWindow,Ui_PSAPage3):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

class PSA_pg4(QMainWindow,Ui_PSAPage4):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

class PSA_pg5(QMainWindow,Ui_PSAPage5):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)

class PSA_pg6(QMainWindow,Ui_PSAPage6):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)





app = QApplication(sys.argv)
window = HomeWindow()
window.show()

app.exec()